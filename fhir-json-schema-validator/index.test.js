const JSONSchemaValidator = require('./index');

describe('JSON Schema Validator Tests', () => {
  const validator = new JSONSchemaValidator();
  let goodPatient = {
    resourceType: 'Patient',
    id: 'af916ef4-eb3b-4cfa-aac5-26143db7fc6e',
    meta: {
      versionId: '1',
      lastUpdated: '2019-04-18T15:30:35.417Z',
    },
    text: {
      status: 'generated',
      div:
        '<div xmlns="http://www.w3.org/1999/xhtml">Generated by <a href="https://github.com/synthetichealth/synthea">Synthea</a>.Version identifier: synthea-java .   Person seed: -2814366335696535238  Population seed: 1553189860786</div>',
    },
    extension: [
      {
        extension: [
          {
            url: 'ombCategory',
            valueCoding: {
              system: 'urn:oid:2.16.840.1.113883.6.238',
              code: '2106-3',
              display: 'White',
            },
          },
          {
            url: 'text',
            valueString: 'White',
          },
        ],
        url: 'http://hl7.org/fhir/us/core-r4/StructureDefinition/us-core-race',
      },
      {
        extension: [
          {
            url: 'ombCategory',
            valueCoding: {
              system: 'urn:oid:2.16.840.1.113883.6.238',
              code: '2186-5',
              display: 'Not Hispanic or Latino',
            },
          },
          {
            url: 'text',
            valueString: 'Not Hispanic or Latino',
          },
        ],
        url: 'http://hl7.org/fhir/us/core-r4/StructureDefinition/us-core-ethnicity',
      },
      {
        url: 'http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName',
        valueString: 'Sally227 Balistreri607',
      },
      {
        url: 'http://hl7.org/fhir/us/core-r4/StructureDefinition/us-core-birthsex',
        valueCode: 'M',
      },
      {
        url: 'http://hl7.org/fhir/StructureDefinition/birthPlace',
        valueAddress: {
          city: 'Lowell',
          state: 'Massachusetts',
          country: 'US',
        },
      },
      {
        url: 'http://synthetichealth.github.io/synthea/disability-adjusted-life-years',
        valueDecimal: 0,
      },
      {
        url: 'http://synthetichealth.github.io/synthea/quality-adjusted-life-years',
        valueDecimal: 6,
      },
    ],
    identifier: [
      {
        system: 'https://github.com/synthetichealth/synthea',
        value: '4cd4c601-d47d-4d89-9813-85f9f1a920d2',
      },
      {
        type: {
          coding: [
            {
              system: 'http://terminology.hl7.org/CodeSystem/v2-0203',
              code: 'MR',
              display: 'Medical Record Number',
            },
          ],
          text: 'Medical Record Number',
        },
        system: 'http://hospital.smarthealthit.org',
        value: '4cd4c601-d47d-4d89-9813-85f9f1a920d2',
      },
      {
        type: {
          coding: [
            {
              system: 'http://terminology.hl7.org/CodeSystem/v2-0203',
              code: 'SSN',
              display: 'Social Security Number',
            },
          ],
          text: 'Social Security Number',
        },
        system: 'http://hl7.org/fhir/sid/us-ssn',
        value: '999-63-8671',
      },
    ],
    name: [
      {
        use: 'official',
        family: 'Hickle134',
        given: ['Charlie254'],
      },
    ],
    telecom: [
      {
        system: 'phone',
        value: '555-797-3475',
        use: 'home',
      },
    ],
    gender: 'male',
    birthDate: '2012-06-18',
    address: [
      {
        extension: [
          {
            extension: [
              {
                url: 'latitude',
                valueDecimal: 42.129251,
              },
              {
                url: 'longitude',
                valueDecimal: -70.908736,
              },
            ],
            url: 'http://hl7.org/fhir/StructureDefinition/geolocation',
          },
        ],
        line: ['623 Tillman Trailer'],
        city: 'BBBBBB',
        state: 'Massachusetts',
        postalCode: '02370',
        country: 'US',
      },
    ],
    maritalStatus: {
      coding: [
        {
          system: 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus',
          code: 'S',
          display: 'Never Married',
        },
      ],
      text: 'Never Married',
    },
    multipleBirthBoolean: false,
    communication: [
      {
        language: {
          coding: [
            {
              system: 'urn:ietf:bcp:47',
              code: 'en-US',
              display: 'English',
            },
          ],
          text: 'English',
        },
      },
    ],
  };
  let badPatient = {
    resourceType: 'Patient',
    id: 'af916ef4-eb3b-4cfa-aac5-26143db7fc6e',
    meta: {
      versionId: '1',
      lastUpdated: '2019-04-18T15:30:35.417Z',
    },
    text: {
      status: 'generated',
      div:
        '<div xmlns="http://www.w3.org/1999/xhtml">Generated by <a href="https://github.com/synthetichealth/synthea">Synthea</a>.Version identifier: synthea-java .   Person seed: -2814366335696535238  Population seed: 1553189860786</div>',
    },
    extension: [
      {
        extension: [
          {
            url: 'ombCategory',
            valueCoding: {
              system: 'urn:oid:2.16.840.1.113883.6.238',
              code: '2106-3',
              display: 'White',
            },
          },
          {
            url: 'text',
            valueString: 'White',
          },
        ],
        url: 'http://hl7.org/fhir/us/core-r4/StructureDefinition/us-core-race',
      },
      {
        extension: [
          {
            url: 'ombCategory',
            valueCoding: {
              system: 'urn:oid:2.16.840.1.113883.6.238',
              code: '2186-5',
              display: 'Not Hispanic or Latino',
            },
          },
          {
            url: 'text',
            valueString: 'Not Hispanic or Latino',
          },
        ],
        url: 'http://hl7.org/fhir/us/core-r4/StructureDefinition/us-core-ethnicity',
      },
      {
        url: 'http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName',
        valueString: 'Sally227 Balistreri607',
      },
      {
        url: 'http://hl7.org/fhir/us/core-r4/StructureDefinition/us-core-birthsex',
        valueCode: 'M',
      },
      {
        url: 'http://hl7.org/fhir/StructureDefinition/birthPlace',
        valueAddress: {
          city: 'Lowell',
          state: 'Massachusetts',
          country: 'US',
        },
      },
      {
        url: 'http://synthetichealth.github.io/synthea/disability-adjusted-life-years',
        valueDecimal: 0,
      },
      {
        url: 'http://synthetichealth.github.io/synthea/quality-adjusted-life-years',
        valueDecimal: 6,
      },
    ],
    identifier: [
      {
        system: 'https://github.com/synthetichealth/synthea',
        value: '4cd4c601-d47d-4d89-9813-85f9f1a920d2',
      },
      {
        type: {
          coding: [
            {
              system: 'http://terminology.hl7.org/CodeSystem/v2-0203',
              code: 'MR',
              display: 'Medical Record Number',
            },
          ],
          text: 'Medical Record Number',
        },
        system: 'http://hospital.smarthealthit.org',
        value: '4cd4c601-d47d-4d89-9813-85f9f1a920d2',
      },
      {
        type: {
          coding: [
            {
              system: 'http://terminology.hl7.org/CodeSystem/v2-0203',
              code: 'SSN',
              display: 'Social Security Number',
            },
          ],
          text: 'Social Security Number',
        },
        system: 'http://hl7.org/fhir/sid/us-ssn',
        value: '999-63-8671',
      },
    ],
    name: [
      {
        use: 'official',
        family: 'Hickle134',
        given: ['Charlie254'],
      },
    ],
    telecom: [
      {
        system: 'phone',
        value: '555-797-3475',
        use: 'home',
      },
    ],
    gender: 'male',
    birthDate: '2012-06-18',
    address: [
      {
        extension: [
          {
            extension: [
              {
                url: 'latitude',
                valueDecimal: 42.129251,
              },
              {
                url: 'longitude',
                valueDecimal: -70.908736,
              },
            ],
            url: 'http://hl7.org/fhir/StructureDefinition/geolocation',
          },
        ],
        line: ['623 Tillman Trailer'],
        city: 7,
        state: 'Massachusetts',
        postalCode: '02370',
        country: 'US',
      },
    ],
    maritalStatus: {
      coding: [
        {
          system: 'http://terminology.hl7.org/CodeSystem/v3-MaritalStatus',
          code: 'S',
          display: 'Never Married',
        },
      ],
      text: 'Never Married',
    },
    multipleBirthBoolean: false,
    communication: [
      {
        language: {
          coding: [
            {
              system: 'urn:ietf:bcp:47',
              code: 'en-US',
              display: 'English',
            },
          ],
          text: 'English',
        },
      },
    ],
  };
  let invalidResourceType = { resourceType: 'foo' };

  test('Should say resource is valid with 0 errors when given a good resource', () => {
    let errors = validator.validate(goodPatient);
    expect(errors).toHaveLength(0);
  });
  test('Should say resource is invalid with concise errors when given bad resource and default options', () => {
    let errors = validator.validate(badPatient);
    expect(errors).toHaveLength(2);
    expect(errors).toEqual([
      {
        dataPath: '.address[0].city',
        keyword: 'type',
        message: 'should be string',
        params: { type: 'string' },
        schemaPath: '#/definitions/string/type',
      },
      {
        dataPath: '',
        keyword: 'oneOf',
        message: 'should match exactly one schema in oneOf',
        params: { passingSchemas: null },
        schemaPath: '#/oneOf',
      },
    ]);
  });
  test('Should say resource is invalid with verbose errors when verbose is set to true', () => {
    let errors = validator.validate(badPatient, true);
    expect(errors).toHaveLength(147);
  });
  test('Should say resourceType is invalid when given unknown resourceType', () => {
    let errors = validator.validate(invalidResourceType);
    expect(errors).toHaveLength(1);
    expect(errors[0]).toContain("Invalid resourceType 'foo'");
  });
});
